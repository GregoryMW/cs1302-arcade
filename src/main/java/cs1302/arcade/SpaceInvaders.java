package cs1302.arcade;

import java.util.Random;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.*;
import javafx.scene.image.*;
import javafx.scene.control.*;
import javafx.scene.paint.*;
import javafx.scene.canvas.*;
import javafx.geometry.*;
import java.util.ArrayList; 
import javafx.animation.Timeline;
import javafx.animation.KeyFrame;
import javafx.event.ActionEvent;
import javafx.util.Duration;
import java.lang.*;

public class SpaceInvaders extends Application
{
    Group screen;
    Scene spaceInvaders;
    Pane background;
    ArrayList<ImageView> invaders;
    ImageView ship;
    ImageView bullet;
    KeyFrame keyFrame;
    Timeline timeline;
    int counter;

    /**
     *  Initial setup for the space invader game
     */
    private void setup()
        {
            counter = 0;
            screen = new Group();
            spaceInvaders = new Scene(screen, 640, 480, Color.BLACK);
            background = new Pane();
            invaders = new ArrayList<ImageView>();
            addInvaders();
            screen.getChildren().add(background);
        }

    /**
     *  Add invaders and the ship to the scene
     */
    private void addInvaders()
        {
            Image alien1 = new Image("Alien1.png", 30, 30, false, true);
            Image shipPic = new Image("Ship.png", 50, 30, true, true);
            ship = new ImageView(shipPic);
            ship.setX(300);
            ship.setY(420);
            background.getChildren().add(ship);
            int count = 0;
            for(int i = 0; i < 10; i++)
            {
                for (int j = 0; j < 4; j ++)
                {
                    invaders.add(new ImageView(alien1));
                    invaders.get(count).relocate(25 + i * 50, 20 + j * 30); 
                    background.getChildren().add(invaders.get(count));
                    count ++;
                }
            }
        }

    /**
     * Return a key event handler that moves to the ship to the left
     * or the right depending on what key event is generated by the associated
     * node.
     * @return event the key event handler
     */
    private void moveShip(KeyCode key) {
        if (key == KeyCode.LEFT && ship.getX() > 10){
            ship.setX(ship.getX() - 10.0);}
        if (key == KeyCode.RIGHT && ship.getX() + 50 < 630){
            ship.setX(ship.getX() + 10.0);}
    }

    /**
     *  Moves the aliens every n number of seconds 
     *  based on the level of the game
     */
    private void moveAliens(){
        if(counter % 2 == 0){
            invaders.stream().forEach(a -> {
                    Platform.runLater(() -> a.setX(a.getX() + 10.0));
                });
            if(invaders.get(10).getX() > 100){
                increaseCounter();
                invaders.stream().forEach(a -> {
                        Platform.runLater(() -> a.setY(a.getY() + 10.0));
                    });
            }
        }
        else if(counter % 2 == 1){ 
            invaders.stream().forEach(a -> {
                    Platform.runLater(() -> a.setX(a.getX() - 10.0));
                });
            if(invaders.get(1).getX() < 10){
                increaseCounter();
                invaders.stream().forEach(a -> {
                        Platform.runLater(() -> a.setY(a.getY() + 10.0));
                    });
            }
        }
                   
    }

    /**
     *  Increases the counter to help keep track of how far down the
     *  aliens have moved in the game.
     */
    private void increaseCounter(){
        counter++;
    }

    /**
     *  Initializes the {@code bullet} object with the bullet image
     *  and sets the bullet to come out of the top of the ship
     */  
    private void makeBullet()
        {
            Image bulletPic = new Image("Bullet.png");
            bullet = new ImageView(bulletPic);
            background.getChildren().add(bullet);
            bullet.setX(ship.getX() + 25);
            bullet.setY(ship.getY() - 25);
        }

    /** 
     *  Makes the bullet move through the scene when fired
     */
    private void fireBullet(){
        bullet.setY(bullet.getY() - 5);
        bullet.setY(bullet.getY() - 5);
        bullet.setY(bullet.getY() - 5);
        bullet.setY(bullet.getY() - 5);
        System.out.println(bullet.getY());
    }
    
    /**
     *  Detects the collision of two ImageView objects with in the scene
     *  {@return boolean} Tells if two objects interact with each other 
     */
    private void collision(ImageView alien, ImageView bullet){
        if(bullet.getBoundsInParent().intersects(alien.getBoundsInParent())){
            System.out.println("Hit");

            background.getChildren().remove(bullet);
            int index = invaders.indexOf(alien);
            invaders.set(index, new ImageView());            
        }
    }
                
           
    
    private EventHandler<? super KeyEvent> inputCheck()
        {
            return event -> {
                {
                    if (event.getCode() == KeyCode.SPACE)
                    {
                        if (background.getChildren().contains(bullet) == false)
                        {
                            makeBullet();
                        }
                    }
                    else if (event.getCode() == KeyCode.LEFT ||
                             event.getCode() == KeyCode.RIGHT);
                    {
                        moveShip(event.getCode());
                    }
                }
            };
        }

    /**
     *  Plays the game of space invaders
     */
    private void play(){
        setup();
        EventHandler<ActionEvent> playGame = e -> {
            Runnable r = () -> {
                moveAliens();
                if(background.getChildren().contains(bullet) == true){
                    fireBullet();
                    if(bullet.getY() < 0){
                        background.getChildren().remove(bullet);
                    }
                }
            };
            Thread t = new Thread(r);
            t.setDaemon(true);
            t.start();
        };
        keyFrame = new KeyFrame(Duration.seconds(0.25), playGame);
        timeline = new Timeline();
        timeline.setCycleCount(Timeline.INDEFINITE);
        timeline.getKeyFrames().add(keyFrame);
        timeline.play();        
    }
    
    /** {@inheritdoc} */
    @Override
    public void start(Stage stage)
        {
            play();
            screen.requestFocus();
            screen.setOnKeyPressed(inputCheck());
            stage.setTitle("Space Invaders");
            stage.setScene(spaceInvaders);
            stage.sizeToScene();
            stage.setResizable(false);
            stage.show();
            

        } // start
}
